@{
    ViewData["Title"] = "Müşteri/Tedarikçi";
}

@section Styles {
    <link href="https://cdn.jsdelivr.net/npm/simple-datatables@7.1.2/dist/style.min.css" rel="stylesheet" />
}

<div class="d-flex justify-content-between align-items-center mb-3">
    <h2 class="mb-0">Müşteri/Tedarikçi</h2>
    <div class="ms-auto">
        <select id="statusFilter" class="form-select form-select-sm d-inline-block me-2" style="width: auto;">
            <option value="-1">Tümü</option>
            <option value="1" selected>Aktif</option>
            <option value="0">Pasif</option>
        </select>
        <button id="btnCreate" class="btn btn-primary btn-sm">Ekle</button>
    </div>
    @Html.AntiForgeryToken()
</div>

<div class="card">
    <div class="card-body">
        <table id="csTable" class="table table-bordered table-striped" style="width:100%">
            <thead>
                <tr>
                    <th>Ad</th>
                    <th>Tip</th>
                    <th>Durum</th>
                    <th style="width: 140px;">İşlemler</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
</div>

<div class="modal fade" id="csModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Müşteri/Tedarikçi</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="formCs">
                    <div class="mb-3">
                        <label class="form-label">Ad</label>
                        <input type="text" class="form-control" name="personName" />
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">TC/Vergi No</label>
                            <input type="text" class="form-control" name="identityNumber" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Vergi Dairesi</label>
                            <input type="text" class="form-control" name="taxOffice" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Durum</label>
                            <select class="form-select" name="status">
                                <option value="1">Aktif</option>
                                <option value="0">Pasif</option>
                            </select>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Kayıt Tipi</label>
                        <select class="form-select" name="type">
                            <option value="1">Müşteri</option>
                            <option value="2">Tedarikçi</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" data-bs-dismiss="modal">Kapat</button>
                <button id="btnSave" class="btn btn-primary">Kaydet</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/simple-datatables@7.1.2/dist/umd/simple-datatables.min.js"></script>
    <script>
        const typeMap = { 1: 'Müşteri', 2: 'Tedarikçi' };
        let table, modal, isEdit = false, editingId = null, cachedRows = [];

        function getCsrf() {
            const token = document.querySelector('input[name="__RequestVerificationToken"]');
            return token ? token.value : '';
        }

        async function getErrorMessage(res) {
            try {
                const ct = res.headers.get('content-type') || '';
                if (ct.includes('application/json')) {
                    const j = await res.json();
                    return j.message || j.Message || JSON.stringify(j);
                }
                const t = await res.text();
                return t || `${res.status} ${res.statusText}`;
            } catch (e) {
                return `${res.status} ${res.statusText}`;
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            modal = new bootstrap.Modal(document.getElementById('csModal'));
            hookUI();
            loadData();
        });

        function hookUI() {
            document.getElementById('btnCreate').addEventListener('click', () => {
                isEdit = false; editingId = null;
                document.querySelector('#formCs').reset();
                document.querySelector('.modal-title').innerText = 'Müşteri/Tedarikçi Ekle';
                // Yeni kayıt için kişisel alanlar aktif
                const form = document.getElementById('formCs');
                form.personName.disabled = false;
                form.identityNumber.disabled = false;
                form.taxOffice.disabled = false;
                modal.show();
            });
            document.getElementById('btnSave').addEventListener('click', onSave);
            document.getElementById('csTable').addEventListener('click', (e) => {
                const btn = e.target.closest('button[data-action]');
                if (!btn) return;
                const id = Number(btn.dataset.id);
                if (btn.dataset.action === 'edit') onEdit(id);
                else if (btn.dataset.action === 'delete') onDelete(id);
                else if (btn.dataset.action === 'activate') onActivate(id);
            });
            document.getElementById('statusFilter').addEventListener('change', renderTable);
        }

        async function loadData() {
            const res = await fetch(`/CustomersSuppliers/List?ts=${Date.now()}`, { cache: 'no-store' });
            if (!res.ok) { cachedRows = []; renderTable(); return; }
            let data;
            try { data = await res.json(); } catch { cachedRows = []; renderTable(); return; }
            const items = data.items || data.Items || [];
            cachedRows = items.map(x => ({
                id: x.id ?? x.Id,
                personId: x.personId ?? x.PersonId,
                personName: x.personName ?? x.PersonName,
                type: x.type ?? x.Type,
                status: x.status ?? x.Status
            }));
            renderTable();
        }

        function getFilteredRows() {
            const filterVal = Number(document.getElementById('statusFilter').value);
            if (filterVal === -1) return cachedRows.slice();
            return cachedRows.filter(r => r.status === filterVal);
        }

        function renderTable() {
            if (table) { table.destroy(); table = null; }
            const body = document.querySelector('#csTable tbody');
            body.innerHTML = '';
            const rows = getFilteredRows();
            rows.forEach(r => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td>${r.personName}</td>
                    <td>${typeMap[r.type] ?? r.type}</td>
                    <td>${r.status === 1 ? 'Aktif' : 'Pasif'}</td>
                    <td>
                        <button class="btn btn-sm btn-outline-secondary me-1" data-action="edit" data-id="${r.id}">Güncelle</button>
                        ${r.status === 0 ? `<button class="btn btn-sm btn-outline-success me-1" data-action="activate" data-id="${r.id}">Aktif Yap</button>` : ''}
                        <button class="btn btn-sm btn-outline-danger" data-action="delete" data-id="${r.id}">Sil</button>
                    </td>`;
                body.appendChild(tr);
            });
            table = new simpleDatatables.DataTable('#csTable', { perPageSelect: false });
        }

        async function onSave() {
            const form = document.getElementById('formCs');

            const personNameVal = form.personName.value?.trim();
            const identityNumberVal = form.identityNumber.value?.trim();
            const taxOfficeVal = form.taxOffice.value?.trim();
            const statusVal = Number(form.status.value);
            const typeVal = Number(form.type.value);

            if (!Number.isInteger(typeVal) || (typeVal !== 1 && typeVal !== 2)) { Swal.fire('Hata', 'Geçerli bir kayıt tipi seçiniz.', 'error'); return; }
            if (!Number.isInteger(statusVal) || (statusVal !== 0 && statusVal !== 1)) { Swal.fire('Hata', 'Geçerli bir durum seçiniz.', 'error'); return; }

            let payload = { id: editingId, type: typeVal, status: statusVal };
            if (!isEdit) {
                if (!personNameVal) { Swal.fire('Hata', 'Yeni kişi adını giriniz.', 'error'); return; }
                payload.person = {
                    name: personNameVal,
                    identityNumber: identityNumberVal ? Number(identityNumberVal) : 0,
                    taxOffice: taxOfficeVal || '',
                    type: 1,
                    status: statusVal
                };
                const res = await fetch('/CustomersSuppliers/Create', { method: 'POST', headers: { 'Content-Type': 'application/json', 'RequestVerificationToken': getCsrf() }, body: JSON.stringify(payload) });
                if (res.ok) { modal.hide(); await loadData(); Swal.fire('Başarılı', 'Kayıt oluşturuldu', 'success'); } else { Swal.fire('Hata', await getErrorMessage(res), 'error'); }
            } else {
                const res = await fetch('/CustomersSuppliers/Update', { method: 'PUT', headers: { 'Content-Type': 'application/json', 'RequestVerificationToken': getCsrf() }, body: JSON.stringify(payload) });
                if (res.ok) { modal.hide(); await loadData(); Swal.fire('Başarılı', 'Kayıt güncellendi', 'success'); } else { Swal.fire('Hata', await getErrorMessage(res), 'error'); }
            }
        }

        function onEdit(id) {
            const row = cachedRows.find(r => r.id === id);
            if (!row) return;
            isEdit = true; editingId = id;
            document.querySelector('.modal-title').innerText = 'Müşteri/Tedarikçi Güncelle';
            const form = document.getElementById('formCs');
            form.personName.value = row.personName;
            form.type.value = row.type;
            form.status.value = row.status;
            form.personName.disabled = true;
            form.identityNumber.disabled = true;
            form.taxOffice.disabled = true;
            modal.show();
        }

        async function onDelete(id) {
            const result = await Swal.fire({ title: 'Silmek istiyor musunuz?', text: 'Bu işlem geri alınamaz', icon: 'warning', showCancelButton: true, confirmButtonText: 'Evet, sil', cancelButtonText: 'Vazgeç' });
            if (!result.isConfirmed) return;
            const res = await fetch(`/CustomersSuppliers/Delete?id=${id}`, { method: 'DELETE', headers: { 'RequestVerificationToken': getCsrf() } });
            if (res.ok) { await loadData(); Swal.fire('Silindi', 'Kayıt başarıyla silindi', 'success'); } else { Swal.fire('Hata', await getErrorMessage(res), 'error'); }
        }

        async function onActivate(id) {
            const row = cachedRows.find(r => r.id === id);
            if (!row) return;
            const payload = { id: id, type: row.type, status: 1 };
            const res = await fetch('/CustomersSuppliers/Update', { method: 'PUT', headers: { 'Content-Type': 'application/json', 'RequestVerificationToken': getCsrf() }, body: JSON.stringify(payload) });
            if (res.ok) { await loadData(); Swal.fire('Başarılı', 'Kayıt aktifleştirildi', 'success'); } else { Swal.fire('Hata', await getErrorMessage(res), 'error'); }
        }
    </script>
}
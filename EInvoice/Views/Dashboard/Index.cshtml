@model PresentationLayer.Models.DashboardProfileViewModel
@{
	ViewData["Title"] = "Dashboard";
}

<h1 class="mt-4">Dashboard</h1>
<ol class="breadcrumb mb-4">
	<li class="breadcrumb-item active">Dashboard</li>
</ol>

<div class="row">
	<div class="col-xl-6">
		<div class="card mb-4">
			<div class="card-header">
				<i class="fas fa-chart-bar me-1"></i>
				Alış vs Satış Tutarları
			</div>
			<div class="card-body"><canvas id="purchaseSalesChart" width="100%" height="40"></canvas></div>
		</div>
	</div>
	<div class="col-xl-6">
		<div class="card mb-4">
			<div class="card-header">
				<i class="fas fa-address-book me-1"></i>
				Cariler
			</div>
			<div class="card-body">
				@if (Model?.Currents != null && Model.Currents.Any())
				{
					<div class="table-responsive">
						<table class="table table-sm align-middle">
							<thead>
								<tr>
									<th>Ad</th>
									<th class="text-end">Bakiye</th>
								</tr>
							</thead>
							<tbody>
								@foreach (var c in Model.Currents)
								{
									var cls = c.Balance >= 0 ? "text-success" : "text-danger";
									<tr>
										<td>@c.CurrentName</td>
										<td class="text-end @cls">@c.Balance.ToString("N2")</td>
									</tr>
								}
							</tbody>
						</table>
					</div>
				}
				else
				{
					<p>Henüz cari bulunamadı.</p>
				}
			</div>
		</div>
	</div>
</div>

<div class="card mb-4">
	<div class="card-header">
		<i class="fas fa-user me-1"></i>
		Profil Bilgilerim
	</div>
	<div class="card-body">
		@if (TempData["ErrorMessage"] != null)
		{
			<div class="alert alert-danger">@TempData["ErrorMessage"]</div>
		}
		@if (TempData["SuccessMessage"] != null)
		{
			<div class="alert alert-success">@TempData["SuccessMessage"]</div>
		}
		@if (Model != null)
		{
			<form id="profileForm" asp-action="Update" method="post">
				@Html.AntiForgeryToken()
				<input type="hidden" name="UserId" value="@Model.UserId" />
				<input type="hidden" name="PersonId" value="@Model.PersonId" />

				<div class="row mb-3">
					<div class="col-md-6">
						<label class="form-label">Ad Soyad</label>
						<input class="form-control" name="Name" value="@Model.Name" />
					</div>
					<div class="col-md-6">
						<label class="form-label">TCKN/VKN</label>
						<input class="form-control" value="@Model.IdentityNumber" readonly />
					</div>
				</div>

				<div class="row mb-3">
					<div class="col-md-6">
						<label class="form-label">Vergi Dairesi</label>
						<input class="form-control" name="TaxOffice" value="@Model.TaxOffice" />
					</div>
					<div class="col-md-6">
						<label class="form-label">Kullanıcı Tipi</label>
						<input class="form-control" value="@(Model.UserType == 1 ? "Gerçek Kişi" : (Model.UserType == 2 ? "Tüzel Kişi" : "Bilinmiyor"))" readonly />
					</div>
				</div>

				<button type="submit" class="btn btn-primary">Güncelle</button>
			</form>
		}
		else
		{
			<p>Profil bilgileri yüklenemedi.</p>
		}
	</div>
</div>

@section Styles { }

	@section Scripts {
		<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
		<script>
			document.addEventListener('DOMContentLoaded', function () {
				const form = document.getElementById('profileForm');
				if (form) {
					form.addEventListener('submit', async function (e) {
						e.preventDefault();

						const fd = new FormData(form);
						const tokenEl = form.querySelector('input[name="__RequestVerificationToken"]');
						const antiForgeryToken = tokenEl ? tokenEl.value : '';

						try {
							const response = await fetch(form.action, {
								method: 'POST',
								headers: { 'RequestVerificationToken': antiForgeryToken },
								body: fd
							});
							const data = await response.json();
							const existing = form.parentElement.querySelector('.alert');
							if (existing) existing.remove();
							const alert = document.createElement('div');
							alert.className = 'alert ' + (data.success ? 'alert-success' : 'alert-danger');
							alert.innerText = data.message || (data.success ? 'Güncellendi' : 'Güncelleme başarısız');
							form.parentElement.insertBefore(alert, form);
						} catch (err) {
							const existing = form.parentElement.querySelector('.alert');
							if (existing) existing.remove();
							const alert = document.createElement('div');
							alert.className = 'alert alert-danger';
							alert.innerText = 'Beklenmeyen bir hata oluştu.';
							form.parentElement.insertBefore(alert, form);
						}
					});
				}

				// Chart: Alış vs Satış
				const ctx = document.getElementById('purchaseSalesChart');
				if (ctx && window.Chart) {
					const purchase = parseFloat('@Model.TotalPurchaseAmount.ToString(System.Globalization.CultureInfo.InvariantCulture)');
					const sales = parseFloat('@Model.TotalSalesAmount.ToString(System.Globalization.CultureInfo.InvariantCulture)');
					new Chart(ctx, {
						type: 'bar',
						data: {
							labels: ['Alış', 'Satış'],
							datasets: [{
								label: 'Tutar (₺)',
								data: [purchase, sales],
								backgroundColor: ['rgba(54, 162, 235, 0.5)', 'rgba(75, 192, 192, 0.5)'],
								borderColor: ['rgba(54, 162, 235, 1)', 'rgba(75, 192, 192, 1)'],
								borderWidth: 1
							}]
						},
						options: {
							responsive: true,
							scales: { y: { beginAtZero: true } }
						}
					});
				}
			});
		</script>
	}
@{
    ViewData["Title"] = "Faturalar";
}

@section Styles {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/simple-datatables@7.1.2/dist/style.css" />
    <style>
        .dataTable-bottom {
            display: none !important;
        }

        .dataTable-top {
            display: none !important;
        }

        #pdfPreviewFrame {
            width: 100%;
            height: 75vh;
            border: 0;
            background: #f8f9fa;
        }
    </style>
}

<div class="d-flex justify-content-between align-items-center mb-3">
    <h2 class="mb-0">Faturalar</h2>
    <button id="btnCreate" class="btn btn-primary">Yeni Fatura</button>
</div>

<div class="card">
    <div class="card-body">
        <table id="invTable" class="table table-striped table-hover align-middle">
            <thead>
                <tr>
                    <th>No</th>
                    <th>Tarih</th>
                    <th>Tip</th>
                    <th>Senaryo</th>
                    <th>Satır</th>
                    <th>Tutar</th>
                    <th>Durum</th>
                    <th>İşlemler</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
</div>


<div class="modal fade" id="invModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Fatura</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="invForm">
                    <div class="row g-3">
                        <div class="col-md-3">
                            <label class="form-label">Fatura Tipi</label>
                            <select class="form-select" name="type">
                                <option value="1">Alış</option>
                                <option value="2">Satış</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Senaryo</label>
                            <select class="form-select" name="senario">
                                <option value="1">e-Fatura</option>
                                <option value="2">e-Arşiv</option>
                                <option value="3">Kağıt</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Kasa/Banka</label>
                            <select class="form-select" name="currentId"></select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Müşteri/Tedarikçi</label>
                            <select class="form-select" name="customerSupplierId"></select>
                        </div>
                    </div>

                    <hr />
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <h6 class="mb-0">Satırlar</h6>
                        <button id="btnAddLine" type="button" class="btn btn-sm btn-outline-primary">Satır Ekle</button>
                    </div>

                    <div class="table-responsive">
                        <table class="table table-bordered align-middle" id="linesTable">
                            <thead>
                                <tr>
                                    <th style="width: 32%">Ürün/Hizmet</th>
                                    <th style="width: 12%">Miktar</th>
                                    <th style="width: 14%">Birim Fiyat</th>
                                    <th style="width: 12%">KDV (%)</th>
                                    <th style="width: 15%">KDV Tutarı</th>
                                    <th style="width: 15%">Tutar (KDV Dahil)</th>
                                    <th style="width: 5%"></th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                            <tfoot>
                                <tr>
                                    <th colspan="5" class="text-end">Toplam (KDV Dahil):</th>
                                    <th id="sumTotal">0,00</th>
                                    <th></th>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" data-bs-dismiss="modal">Kapat</button>
                <button id="btnSave" class="btn btn-primary">Kaydet</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="previewModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Fatura Önizleme</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <iframe id="pdfPreviewFrame"></iframe>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" data-bs-dismiss="modal">Kapat</button>
                <button id="btnDownloadPdf" class="btn btn-primary">PDF İndir</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/simple-datatables@7.1.2/dist/umd/simple-datatables.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/pdfmake@0.2.7/build/pdfmake.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/pdfmake@0.2.7/build/vfs_fonts.js"></script>
    <script>
        const invTypeMap = { 1: 'Alış', 2: 'Satış' };
        const senarioMap = { 1: 'e-Fatura', 2: 'e-Arşiv', 3: 'Kağıt' };
        let table, modal, previewModal, isEdit = false, editingId = null;
        let cachedInvoices = [], products = [], currents = [], csList = [];
        let currentLines = [];

        function getCsrf() {
            const token = document.querySelector('input[name="__RequestVerificationToken"]');
            return token ? token.value : '';
        }
        async function getErrorMessage(res) {
            try {
                const ct = res.headers.get('content-type') || '';
                if (ct.includes('application/json')) {
                    const j = await res.json();
                    return j.message || j.Message || JSON.stringify(j);
                }
                const t = await res.text();
                return t || `${res.status} ${res.statusText}`;
            } catch (e) { return `${res.status} ${res.statusText}`; }
        }

        document.addEventListener('DOMContentLoaded', async () => {
            modal = new bootstrap.Modal(document.getElementById('invModal'));
            hookUI();
            await preloadLookups();
            await loadInvoices();
        });

        function hookUI() {
            document.getElementById('btnCreate').addEventListener('click', onCreateClick);
            document.getElementById('btnAddLine').addEventListener('click', addEmptyLine);
            document.getElementById('btnSave').addEventListener('click', onSave);
            document.getElementById('btnSave').setAttribute('data-loading-text', 'Kaydediliyor...');
            document.getElementById('invTable').addEventListener('click', onTableAction);
            document.getElementById('linesTable').addEventListener('input', onLineChanged);
            document.getElementById('linesTable').addEventListener('click', onLineRemove);
            document.getElementById('invForm').addEventListener('submit', (e) => e.preventDefault());
            // CSRF token for modal form
            if (!document.querySelector('#invForm input[name="__RequestVerificationToken"]')) {
                const hidden = document.createElement('input');
                hidden.type = 'hidden'; hidden.name = '__RequestVerificationToken';
                hidden.value = document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';
                document.getElementById('invForm').appendChild(hidden);
            }
        }

        async function preloadLookups() {
            const [currRes, csRes, prodRes] = await Promise.all([
                fetch('/Currents/List?ts=' + Date.now(), { cache: 'no-store' }),
                fetch('/CustomersSuppliers/List?ts=' + Date.now(), { cache: 'no-store' }),
                fetch('/ProductsAndServices/List?ts=' + Date.now(), { cache: 'no-store' })
            ]);

            // currents
            if (currRes.ok) {
                const j = await currRes.json();
                const arr = j.currents || j.Currents || j.items || j.Items || [];
                currents = arr.map(x => ({ id: x.currentId ?? x.CurrentId ?? x.id ?? x.Id, name: x.currentName ?? x.CurrentName ?? x.name ?? x.Name }));
            }
            // customers/suppliers
            if (csRes.ok) {
                const j = await csRes.json();
                const arr = j.items || j.Items || [];
                csList = arr.filter(x => (x.status ?? x.Status) === 1).map(x => ({ id: x.id ?? x.Id, name: x.personName ?? x.PersonName }));
            }
            // products
            if (prodRes.ok) {
                const j = await prodRes.json();
                const arr = j.items || j.Items || [];
                products = arr
                    .filter(x => (x.status ?? x.Status) === 1)
                    .map(x => ({
                        id: x.id ?? x.Id,
                        name: x.name ?? x.Name,
                        unitPrice: Number(x.unitPrice ?? x.UnitPrice) || 0,
                        unitType: x.unitType ?? x.UnitType
                    }));
            }
        }

        async function loadInvoices() {
            const res = await fetch('/Invoices/List?ts=' + Date.now(), { cache: 'no-store' });
            if (!res.ok) { cachedInvoices = []; renderTable(); return; }
            let data;
            try { data = await res.json(); } catch { cachedInvoices = []; renderTable(); return; }
            const items = data.items || data.Items || [];
            cachedInvoices = items.map(x => ({
                id: x.id ?? x.Id,
                no: x.no ?? x.No,
                date: x.date ?? x.Date,
                type: x.type ?? x.Type,
                senario: x.senario ?? x.Senario,
                lineCount: x.lineCount ?? x.LineCount,
                totalAmount: x.totalAmount ?? x.TotalAmount,
                status: x.status ?? x.Status
            })).filter(x => x.status === 1);
            renderTable();
        }

        function renderTable() {
            if (table) { table.destroy(); table = null; }
            const body = document.querySelector('#invTable tbody');
            body.innerHTML = '';
            if (!cachedInvoices || cachedInvoices.length === 0) {
                body.innerHTML = `<tr><td colspan="8" class="text-center text-muted">Kayıt yok</td></tr>`;
                return;
            }
            cachedInvoices.forEach(r => {
                const tr = document.createElement('tr');
                const date = r.date ? new Date(r.date) : null;
                tr.innerHTML = `
                    <td>${r.no ?? ''}</td>
                    <td>${date ? date.toLocaleString() : ''}</td>
                    <td>${invTypeMap[r.type] ?? r.type}</td>
                    <td>${senarioMap[r.senario] ?? r.senario}</td>
                    <td>${r.lineCount ?? 0}</td>
                    <td>${(r.totalAmount ?? 0).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>
                    <td>${r.status === 1 ? 'Aktif' : 'Pasif'}</td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary me-1" data-action="preview" data-id="${r.id}">Görüntüle</button>
                        <button class="btn btn-sm btn-outline-secondary me-1" data-action="edit" data-id="${r.id}">Güncelle</button>
                        <button class="btn btn-sm btn-outline-danger" data-action="delete" data-id="${r.id}">Sil</button>
                    </td>`;
                body.appendChild(tr);
            });
            table = new simpleDatatables.DataTable('#invTable', {
                searchable: true,
                fixedHeight: false,
                perPage: 10,
                perPageSelect: [10, 25, 50, 100],
                labels: { placeholder: 'Ara...', perPage: 'Sayfa başına', noRows: 'Kayıt yok', info: '{start}-{end} / {rows}' },
                columns: [ { select: 0, sortable: false } ]
            });
        }

        function onCreateClick() {
            isEdit = false; editingId = null;
            document.querySelector('#invForm').reset();
            fillLookup(document.querySelector('select[name="currentId"]'), currents);
            fillLookup(document.querySelector('select[name="customerSupplierId"]'), csList);
            renderLines([{ id: null, productAndServiceId: products[0]?.id ?? '', quantity: 1, unitPrice: products[0]?.unitPrice || 0, vatRate: 0 }]);
            document.querySelector('.modal-title').innerText = 'Fatura Oluştur';
            modal.show();
        }

        function fillLookup(selectEl, items) {
            selectEl.innerHTML = '<option value="">Seçiniz...</option>';
            items.forEach(it => {
                const opt = document.createElement('option');
                opt.value = it.id;
                opt.textContent = it.name;
                selectEl.appendChild(opt);
            });
        }

        function addEmptyLine() {
            currentLines.push({ id: null, productAndServiceId: (products[0]?.id ?? ''), quantity: 1, unitPrice: products[0]?.unitPrice || 0, vatRate: 0 });
            renderLines(currentLines);
        }

        function onLineChanged(e) {
            const tr = e.target.closest('tr[data-idx]');
            if (!tr) return;
            const idx = Number(tr.dataset.idx);
            const inputName = e.target.name;
            if (inputName === 'product') {
                currentLines[idx].productAndServiceId = Number(e.target.value);
                const p = products.find(p => Number(p.id) === Number(e.target.value));
                const price = p ? Number(p.unitPrice) || 0 : 0;
                currentLines[idx].unitPrice = price;
                const priceInput = tr.querySelector('input[name="price"]');
                if (priceInput) priceInput.value = String(price);
            } else if (inputName === 'qty') {
                currentLines[idx].quantity = Number(e.target.value) || 0;
            } else if (inputName === 'price') {
                currentLines[idx].unitPrice = Number(e.target.value) || 0;
            } else if (inputName === 'vat') {
                currentLines[idx].vatRate = Number(e.target.value) || 0;
            }
            // Sadece ilgili satırın tutarlarını ve toplamı güncelle
            const qty = Number(currentLines[idx].quantity) || 0;
            const unitPrice = Number(currentLines[idx].unitPrice) || 0;
            const vatRate = Number(currentLines[idx].vatRate) || 0;
            const amountNet = qty * unitPrice;
            const vatAmount = amountNet * (vatRate / 100);
            const amountGross = amountNet + vatAmount;
            const amountInput = tr.querySelector('input[name="amount"]');
            if (amountInput) amountInput.value = amountGross.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            const vatAmountInput = tr.querySelector('input[name="vatAmount"]');
            if (vatAmountInput) vatAmountInput.value = vatAmount.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            updateTotal();
        }
        function onLineRemove(e) {
            const btn = e.target.closest('button[data-remove]');
            if (!btn) return;
            const idx = Number(btn.dataset.remove);
            currentLines.splice(idx, 1);
            renderLines(currentLines);
        }

        function renderLines(lines) {
            currentLines = Array.isArray(lines) ? lines.map(l => ({ id: l.id ?? null, productAndServiceId: Number(l.productAndServiceId) || '', quantity: Number(l.quantity) || 0, unitPrice: Number(l.unitPrice) || 0, vatRate: Number(l.vatRate ?? l.VatRate) || 0 })) : currentLines;
            const body = document.querySelector('#linesTable tbody');
            body.innerHTML = '';
            let total = 0;
            currentLines.forEach((ln, i) => {
                const qty = (Number(ln.quantity) || 0);
                const price = (Number(ln.unitPrice) || 0);
                const amountNet = qty * price;
                const vatRate = Number(ln.vatRate) || 0;
                const vatAmount = amountNet * (vatRate / 100);
                const amountGross = amountNet + vatAmount;
                total += amountGross;
                const tr = document.createElement('tr');
                tr.dataset.idx = i;
                if (ln.id) tr.dataset.id = ln.id;
                tr.innerHTML = `
                    <td>
                        <select name="product" class="form-select">
                            ${products.map(p => `<option value="${p.id}" ${Number(ln.productAndServiceId) === Number(p.id) ? 'selected' : ''}>${p.name}</option>`).join('')}
                        </select>
                    </td>
                    <td><input name="qty" type="number" min="1" step="1" class="form-control" value="${ln.quantity ?? 1}" /></td>
                    <td><input name="price" type="number" min="0" step="0.01" class="form-control" value="${ln.unitPrice ?? 0}" /></td>
                    <td><input name="vat" type="number" min="0" max="100" step="1" class="form-control" value="${vatRate}" /></td>
                    <td><input name="vatAmount" class="form-control" value="${vatAmount.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}" readonly /></td>
                    <td><input name="amount" class="form-control" value="${amountGross.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}" readonly /></td>
                    <td class="text-center"><button class="btn btn-sm btn-outline-danger" data-remove="${i}"><i class="fas fa-trash"></i></button></td>`;
                body.appendChild(tr);
            });
            document.getElementById('sumTotal').innerText = total.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
        }

        function collectLines() {
            return currentLines.map(l => {
                const item = { id: l.id ?? null, productAndServiceId: Number(l.productAndServiceId), quantity: Number(l.quantity) || 0, unitPrice: Number(l.unitPrice) || 0, vatRate: Number(l.vatRate) || 0 };
                if (!item.id || item.id <= 0) delete item.id;
                return item;
            });
        }

        function updateTotal() {
            const total = currentLines.reduce((acc, l) => {
                const qty = Number(l.quantity) || 0;
                const unit = Number(l.unitPrice) || 0;
                const rate = Number(l.vatRate) || 0;
                return acc + (qty * unit * (1 + rate / 100));
            }, 0);
            document.getElementById('sumTotal').innerText = total.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
        }

        async function onSave() {
            const form = document.getElementById('invForm');
            const payload = {
                type: Number(form.type.value),
                senario: Number(form.senario.value),
                currentId: Number(form.currentId.value),
                customerSupplierId: Number(form.customerSupplierId.value),
                status: 1,
                lineOfInovices: collectLines()
            };
            if (!payload.currentId) { Swal.fire('Hata', 'Kasa/Banka seçiniz', 'error'); return; }
            if (!payload.customerSupplierId) { Swal.fire('Hata', 'Müşteri/Tedarikçi seçiniz', 'error'); return; }
            if (!payload.lineOfInovices || payload.lineOfInovices.length === 0) {
                Swal.fire('Hata', 'En az bir satır ekleyin.', 'error');
                return;
            }
            const btn = document.getElementById('btnSave');
            const oldText = btn.innerText; btn.disabled = true; btn.innerText = btn.getAttribute('data-loading-text') || 'Kaydediliyor...';
            try {
                if (!isEdit) {
                    const res = await fetch('/Invoices/Create', { method: 'POST', headers: { 'Content-Type': 'application/json', 'RequestVerificationToken': getCsrf() }, body: JSON.stringify(payload) });
                    if (res.ok) { modal.hide(); await loadInvoices(); Swal.fire('Başarılı', 'Fatura oluşturuldu', 'success'); } else { Swal.fire('Hata', await getErrorMessage(res), 'error'); }
                    return;
                } else {
                    payload.id = editingId;
                    const res = await fetch('/Invoices/Update', { method: 'PUT', headers: { 'Content-Type': 'application/json', 'RequestVerificationToken': getCsrf() }, body: JSON.stringify(payload) });
                    if (res.ok) { modal.hide(); await loadInvoices(); Swal.fire('Başarılı', 'Fatura güncellendi', 'success'); } else { Swal.fire('Hata', await getErrorMessage(res), 'error'); }
                }
            } finally {
                btn.disabled = false; btn.innerText = oldText;
            }
        }

        async function onTableAction(e) {
            const btn = e.target.closest('button[data-action]');
            if (!btn) return;
            const id = Number(btn.dataset.id);
            if (btn.dataset.action === 'edit') {
                const res = await fetch('/Invoices/Get?id=' + id);
                if (!res.ok) { Swal.fire('Hata', await getErrorMessage(res), 'error'); return; }
                const data = await res.json();
                const inv = data || {};
                isEdit = true; editingId = inv.id ?? inv.Id;
                const form = document.getElementById('invForm');
                form.type.value = inv.type ?? inv.Type;
                form.senario.value = inv.senario ?? inv.Senario;
                if (currents.length === 0 || csList.length === 0 || products.length === 0) {
                    await preloadLookups();
                }
                fillLookup(form.currentId, currents); form.currentId.value = inv.currentId ?? inv.CurrentId;
                fillLookup(form.customerSupplierId, csList); form.customerSupplierId.value = inv.customerSupplierId ?? inv.CustomerSupplierId;
                const lines = (inv.lines ?? inv.Lines ?? []).map(l => ({ id: (l.id ?? l.Id) ?? null, productAndServiceId: l.productAndServiceId ?? l.ProductAndServiceId, quantity: l.quantity ?? l.Quantity, unitPrice: l.unitPrice ?? l.UnitPrice, vatRate: l.vatRate ?? l.VatRate ?? 0 }));
                renderLines(lines);
                document.querySelector('.modal-title').innerText = 'Fatura Güncelle';
                modal.show();
            } else if (btn.dataset.action === 'delete') {
                const result = await Swal.fire({ title: 'Silmek istiyor musunuz?', text: 'Bu işlem geri alınamaz', icon: 'warning', showCancelButton: true, confirmButtonText: 'Evet, sil', cancelButtonText: 'Vazgeç' });
                if (!result.isConfirmed) return;
                const res = await fetch('/Invoices/Delete?id=' + id, { method: 'DELETE', headers: { 'RequestVerificationToken': getCsrf() } });
                if (res.ok) { await loadInvoices(); Swal.fire('Silindi', 'Fatura pasife alındı', 'success'); } else { Swal.fire('Hata', await getErrorMessage(res), 'error'); }
            } else if (btn.dataset.action === 'preview') {
                // Load full invoice details then generate PDF via pdfmake
                const invRes = await fetch('/Invoices/GetFull?id=' + id, { cache: 'no-store' });
                if (!invRes.ok) { Swal.fire('Hata', await getErrorMessage(invRes), 'error'); return; }
                const data = await invRes.json();
                const inv = data.invoice || data.Invoice || {};
                const current = data.current || data.Current || {};
                const userPerson = data.currentUserPerson || data.CurrentUserPerson || null;
                const csPerson = data.customerSupplierPerson || data.CustomerSupplierPerson || null;
                const linesSrc = data.lineDetails || data.LineDetails || [];
                const lines = linesSrc.map(l => ({
                    ProductName: l.productName ?? l.ProductName ?? '',
                    UnitType: (l.unitType ?? l.UnitType),
                    Quantity: Number((l.quantity ?? l.Quantity) || 0) || 0,
                    UnitPrice: Number((l.unitPrice ?? l.UnitPrice) || 0) || 0,
                    VatRate: Number((l.vatRate ?? l.VatRate) || 0) || 0
                }));
                const docDef = buildPdfDoc({ inv, current, userPerson, csPerson, lines });
                const pdfDoc = pdfMake.createPdf(docDef);
                pdfDoc.getBlob((blob) => {
                    const url = URL.createObjectURL(blob);
                    document.getElementById('pdfPreviewFrame').src = url;
                    const previewModal = new bootstrap.Modal(document.getElementById('previewModal'));
                    previewModal.show();
                    const btnDl = document.getElementById('btnDownloadPdf');
                    btnDl.onclick = () => pdfDoc.download(`Fatura_${inv.No || inv.Id}.pdf`);
                });
            }
        }
                function buildPdfDoc(model) {
          const NAVY = '#002147';
          const RED  = '#d0021b';
          const GRAY = '#f2f2f2';

          const inv = model.inv || {};
          const user = model.userPerson || {};
          const buyer = model.csPerson || {};
          const current = model.current || {};

          // --- Satıcı / Alıcı verileri ---
          const sellerAddr = (user.BranchAddresses ?? user.branchAddresses ?? [])[0] || '';
          const sellerWeb  = (user.Websites ?? user.websites ?? [])[0] || '';
          const sellerMail = (user.Emails ?? user.emails ?? [])[0] || '';
          const sellerTax  = (user.TaxOffice ?? user.taxOffice) || '';
          const sellerId   = (user.IdentityNumber ?? user.identityNumber) || '';

          const buyerName  = (buyer.PersonName ?? buyer.personName) || '';
          const buyerAddr  = (buyer.BranchAddresses ?? buyer.branchAddresses ?? [])[0] || '';
          const buyerMail  = (buyer.Emails ?? buyer.emails ?? [])[0] || '';
          const buyerPhone = (buyer.Phones ?? buyer.phones ?? [])[0] || '';
          const buyerTax   = (buyer.TaxOffice ?? buyer.taxOffice) || '';

          // --- Fatura başlık bilgileri ---
          const invNo   = (inv.No ?? inv.no) || '';
          const invDate = (inv.Date ?? inv.date) ? new Date(inv.Date ?? inv.date).toLocaleDateString('tr-TR') : '';
          const sentDt  = (inv.Date ?? inv.date) ? new Date(inv.Date ?? inv.date).toLocaleString('tr-TR') : '';
          const invType = (mapInvoiceType ? mapInvoiceType(inv.Type ?? inv.type) : (inv.Type===1?'Alış':inv.Type===2?'Satış':String(inv.Type ?? ''))).toUpperCase();
          const sen     = (inv.Senario ?? inv.senario);
          const senText = (mapSenario ? mapSenario(sen) : (sen===1?'e-Fatura':sen===2?'e-Arşiv':sen===3?'Kağıt':String(sen ?? ''))).toUpperCase().replace('İ','I').replace('Ş','S');
          const titleText = sen === 2 ? 'e-ARŞİV' : 'e-FATURA';

          // --- Satırlar + toplamlar ---
          const lines = (model.lines || []);
          const itemRows = [
            [
              { text: 'Sıra No', style: 'th' },
              { text: 'Mal Hizmet', style: 'th' },
              { text: 'Miktar', style: 'th', alignment: 'right' },
              { text: 'Birim Fiyat', style: 'th', alignment: 'right' },
              { text: 'KDV Oranı', style: 'th', alignment: 'right' },
              { text: 'KDV Tutarı', style: 'th', alignment: 'right' },
              { text: 'Mal Hizmet Tutarı', style: 'th', alignment: 'right' }
            ]
          ];
          let subTotal = 0;
          let totalVat = 0;
          lines.forEach((ln, i) => {
            const qty = Number(ln.Quantity || 0);
            const price = Number(ln.UnitPrice || 0);
            const amount = qty * price;
            const vatRate = Number(ln.VatRate || ln.vatRate || 0);
            const vatAmt = amount * (vatRate/100);
            subTotal += amount;
            totalVat += vatAmt;
            itemRows.push([
              String(i+1),
              String(ln.ProductName ?? ''),
              { text: `${qty} ${mapUnitType?mapUnitType(ln.UnitType):String(ln.UnitType??'')}`, alignment:'right' },
              { text: num(price), alignment:'right' },
              { text: `%${vatRate}`, alignment:'right' },
              { text: num(vatAmt), alignment:'right' },
              { text: num(amount), alignment:'right' }
            ]);
          });
          const grand = subTotal + totalVat;



          // --- Doküman ---
          return {
            pageMargins: [30, 40, 30, 40],
            content: [
              // Üst başlık (satıcı - logo+title - alıcı)
              {
                columns: [
                  {
                    width: '*',
                    stack: [
                      { text: 'Satıcı Bilgileri', color: NAVY, bold: true, margin: [0,0,0,4] },
                      { text: [
                          'Adres: ', {text: sellerAddr}, '\n',
                          'Web: ', {text: sellerWeb}, '\n',
                          'E-posta: ', {text: sellerMail}, '\n',
                          'Vergi Dairesi: ', {text: sellerTax}, '\n',
                          'TCKN/VKN: ', {text: String(sellerId)}
                        ] }
                    ]
                  },
                  {
                    width: 160,
                    stack: [
                      {
                        canvas: [
                          { type: 'rect', x:0, y:0, w:120, h:60, lineColor: NAVY, lineWidth: 1 }
                        ],
                        margin: [20,0,20,6]
                      },
                      { text: titleText, color: RED, bold: true, fontSize: 16, alignment: 'center' }
                    ]
                  },
                  {
                    width: '*',
                    stack: [
                      { text: 'SAYIN', bold: true, margin: [0,0,0,4] },
                      { text: [
                          (buyerName||'-'), '\n',
                          'Adres: ', {text: buyerAddr}, '\n',
                          'E-posta: ', {text: buyerMail}, '\n',
                          'Tel: ', {text: buyerPhone}, '\n',
                          'Vergi Dairesi: ', {text: buyerTax}
                        ] }
                    ]
                  }
                ],
                columnGap: 18,
                margin: [0,0,0,8]
              },

              // Üst ayırıcı çizgi (lacivert)
              { canvas: [ { type:'line', x1:0, y1:0, x2:515, y2:0, lineWidth:2, lineColor:NAVY } ], margin:[0,6,0,8] },

              // Sağda meta (2 sütunlu tablo)
              {
                columns: [
                  { width: '*', text: '' },
                  {
                    width: 300,
                    table: {
                      widths: [140, '*'],
                      body: [
                        [ metaKey('Özelleştirme No', GRAY), 'TR1.2' ],
                        [ metaKey('Senaryo', GRAY), senText ],
                        [ metaKey('Fatura Tipi', GRAY), invType ],
                        [ metaKey('Fatura No', GRAY), String(invNo) ],
                        [ metaKey('Fatura Tarihi', GRAY), invDate ],
                        [ metaKey('Gönderim Tarihi', GRAY), sentDt ],
                        [ metaKey('Satış Kanalı', GRAY), 'Diğer' ]
                      ]
                    },
                    layout: {
                      fillColor: function (row) { return row === 0 ? null : null; },
                      hLineWidth: () => 1, vLineWidth: () => 1,
                      hLineColor: () => '#000', vLineColor: () => '#000'
                    }
                  }
                ],
                margin: [0,0,0,8]
              },

              // ETTN kutusu
              {
                table: {
                  widths: ['*'],
                  body: [[ { text: 'ETTN: ' + String(inv.Ettn ?? inv.ettn ?? '-'), bold: true, color: NAVY } ]]
                },
                layout: {
                  hLineWidth: (i,n) => (i===0||i===n)?2:2,
                  vLineWidth: (i,n) => (i===0||i===n)?2:2,
                  hLineColor: () => NAVY,
                  vLineColor: () => NAVY
                },
                fillColor: '#fafafa',
                margin: [0,6,0,8]
              },

              // Ürün tablosu (geniş)
              {
                table: {
                  headerRows: 1,
                  widths: [45, 70, '*', 65, 70, 60, 70, 85],
                  body: itemRows
                },
                layout: {
                  fillColor: function (rowIndex) { return rowIndex === 0 ? GRAY : null; },
                  hLineWidth: function (i, n, node) {
                    // header kalın lacivert, diğerleri 1
                    if (i === 0 || i === 1) return i === 1 ? 2 : 2;
                    return 1;
                  },
                  vLineWidth: function () { return 1; },
                  hLineColor: function (i) { return (i===1) ? NAVY : '#000'; },
                  vLineColor: function () { return '#000'; }
                },
                margin: [0,0,0,8]
              },

              // Totaller (sağda)
              {
                columns: [
                  { width: '*', text: '' },
                  {
                    width: 300,
                    table: {
                      widths: ['*', 120],
                      body: [
                        [ { text: 'Mal Hizmet Toplam Tutarı', fillColor: GRAY, bold: true }, { text: num(subTotal), alignment: 'right' } ],
                        [ { text: 'Hesaplanan KDV', fillColor: GRAY, bold: true }, { text: num(totalVat), alignment: 'right' } ],
                        [ { text: 'Vergiler Dahil Toplam Tutar', fillColor: GRAY, bold: true }, { text: num(grand), alignment: 'right' } ],
                        [ { text: 'Ödenecek Tutar', fillColor: GRAY, bold: true }, { text: num(grand), alignment: 'right', color: RED, bold: true } ]
                      ]
                    },
                    layout: {
                      hLineWidth: (i,n) => 1,
                      vLineWidth: (i,n) => 1,
                      hLineColor: () => '#000',
                      vLineColor: (i) => (i===1 ? NAVY : '#000') // sol iç çizgi lacivert vurgulu
                    }
                  }
                ],
                margin: [0,0,0,8]
              },

              // Yalnız kutusu
              {
                table: {
                  widths: ['*'],
                  body: [[ { text: `Yalnız: ${textYaziIle(grand)}` } ]]
                },
                layout: { hLineWidth:()=>1, vLineWidth:()=>1, hLineColor:()=>'#000', vLineColor:()=>'#000' },
                fillColor: '#fafafa',
                margin: [0,0,0,8]
              },

              { text: 'Bu belge sistem tarafından oluşturulmuştur.', alignment: 'center', color: '#555', fontSize: 11 }
            ],

            styles: {
              th: { bold: true, fillColor: GRAY, color: '#000' }
            },

            defaultStyle: {
              fontSize: 12
            }
          };

          // ---- helpers (pdf çıktısı için) ----
          function num(n){ return Number(n||0).toLocaleString('tr-TR',{minimumFractionDigits:2,maximumFractionDigits:2}); }
          function metaKey(text, fill){ return { text, bold:true, fillColor: fill, color:'#000' }; }
          function textYaziIle(x){ try{const a=Math.round(Number(x)||0); return a.toLocaleString('tr-TR')+' Türk Lirası';}catch{return ''; } }
        }
        function mapInvoiceType(t) { return t === 1 ? 'Alış' : t === 2 ? 'Satış' : String(t ?? ''); }
        function mapSenario(s) { return s === 1 ? 'e-Fatura' : s === 2 ? 'e-Arşiv' : s === 3 ? 'Kağıt' : String(s ?? ''); }
        function mapCurrentType(ct) { return ct === 0 ? 'Kasa' : ct === 1 ? 'Banka' : String(ct ?? ''); }
        function mapCurrency(c) { return c === 1 ? 'TL' : c === 2 ? 'EUR' : c === 3 ? 'USD' : String(c ?? ''); }
        function mapUnitType(u) { return u === 1 ? 'Adet' : u === 2 ? 'Kilogram' : u === 3 ? 'Gram' : u === 4 ? 'Litre' : u === 5 ? 'Mililitre' : u === 6 ? 'Metre' : u === 7 ? 'Santimetre' : String(u ?? ''); }
    </script>
}
@{
    ViewData["Title"] = "Fatura Önizleme";
    var id = ViewBag.InvoiceId as long? ?? 0;
}

@section Styles {
    <style>
        html, body { height: 100%; }
        .viewer-container { height: calc(100vh - 80px); }
        iframe { width: 100%; height: 100%; border: 0; background: #f8f9fa; }
    </style>
}

<div class="d-flex justify-content-between align-items-center mb-3">
    <h2 class="mb-0">Fatura Önizleme</h2>
    <div>
        <a class="btn btn-secondary" href="/Invoices">Geri</a>
        <button id="btnDownload" class="btn btn-primary">PDF İndir</button>
    </div>
</div>

<div class="viewer-container">
    <iframe id="pdfFrame"></iframe>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/pdfmake@0.2.7/build/pdfmake.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/pdfmake@0.2.7/build/vfs_fonts.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>
    <script>
        const invoiceId = @id;
        document.addEventListener('DOMContentLoaded', async () => {
            const model = await loadInvoice(invoiceId);
            const html = buildInvoiceHtml(model);
            const blob = await renderHtmlToPdfBlob(html);
            const url = URL.createObjectURL(blob);
            document.getElementById('pdfFrame').src = url;
            document.getElementById('btnDownload').addEventListener('click', () => {
                const a = document.createElement('a');
                a.href = url;
                a.download = `Fatura_${(model.inv.No ?? model.inv.no) || model.inv.Id || model.inv.id || ''}.pdf`;
                a.click();
            });
        });

        async function loadInvoice(id) {
            const res = await fetch(`/Invoices/GetFull?id=${id}`, { cache: 'no-store' });
            if (!res.ok) throw new Error('Fatura getirilemedi');
            const data = await res.json();
            const inv = data.invoice || data.Invoice || {};
            const current = data.current || data.Current || {};
            const userPerson = data.currentUserPerson || data.CurrentUserPerson || null;
            const csPerson = data.customerSupplierPerson || data.CustomerSupplierPerson || null;
            const linesSrc = data.lineDetails || data.LineDetails || [];
            const lines = linesSrc.map(l => ({
                Code: (l.productAndServiceId ?? l.ProductAndServiceId) ?? '',
                ProductName: l.productName ?? l.ProductName ?? '',
                UnitType: (l.unitType ?? l.UnitType),
                Quantity: Number((l.quantity ?? l.Quantity) || 0) || 0,
                UnitPrice: Number((l.unitPrice ?? l.UnitPrice) || 0) || 0,
                VatRate: Number((l.vatRate ?? l.VatRate) || 0) || 0
            }));
            return { inv, current, userPerson, csPerson, lines };
        }
        async function renderHtmlToPdfBlob(html) {
            const host = document.createElement('div');
            host.style.position = 'fixed';
            host.style.left = '-10000px';
            host.style.top = '0';
            host.innerHTML = html;
            document.body.appendChild(host);
            const opt = { margin:       0,
                          filename:     'fatura.pdf',
                          image:        { type: 'jpeg', quality: 0.98 },
                          html2canvas:  { scale: 2, useCORS: true },
                          jsPDF:        { unit: 'mm', format: 'a4', orientation: 'portrait' } };
            const blob = await html2pdf().set(opt).from(host).outputPdf('blob');
            document.body.removeChild(host);
            return blob;
        }

        function buildInvoiceHtml(model) {
            const inv = model.inv || {};
            const user = model.userPerson || {};
            const buyer = model.csPerson || {};
            const sellerAddress = (user.BranchAddresses ?? user.branchAddresses ?? [])[0] || '';
            const sellerWeb = (user.Websites ?? user.websites ?? [])[0] || '';
            const sellerMail = (user.Emails ?? user.emails ?? [])[0] || '';
            const sellerTax = (user.TaxOffice ?? user.taxOffice) || '';
            const sellerId = (user.IdentityNumber ?? user.identityNumber) || '';
            const buyerName = (buyer.PersonName ?? buyer.personName) || '';
            const buyerAddr = (buyer.BranchAddresses ?? buyer.branchAddresses ?? [])[0] || '';
            const buyerMail = (buyer.Emails ?? buyer.emails ?? [])[0] || '';
            const buyerPhone = (buyer.Phones ?? buyer.phones ?? [])[0] || '';
            const buyerTax = (buyer.TaxOffice ?? buyer.taxOffice) || '';
            const invNo = (inv.No ?? inv.no) || '';
            const invDate = (inv.Date ?? inv.date) ? new Date(inv.Date ?? inv.date).toLocaleDateString('tr-TR') : '';
            const sentDate = (inv.Date ?? inv.date) ? new Date(inv.Date ?? inv.date).toLocaleString('tr-TR') : '';
            const invType = mapInvoiceType(inv.Type ?? inv.type).toUpperCase();
            const sen = (inv.Senario ?? inv.senario);
            const senText = sen === 1 ? 'TICARIFATURA' : (sen === 2 ? 'ARSIVFATURA' : 'KAGITFATURA');
            const itemsHtml = (model.lines || []).map((ln, i) => {
                const qtyText = `${(ln.Quantity || 0)} ${mapUnitType(ln.UnitType)}`;
                const priceText = `${(ln.UnitPrice || 0).toLocaleString('tr-TR', { minimumFractionDigits: 0 })} TL`;
                const amount = (ln.Quantity || 0) * (ln.UnitPrice || 0);
                const amountText = `${amount.toLocaleString('tr-TR', { minimumFractionDigits: 0 })} TL`;
                const vatRate = Number(ln.VatRate || 0);
                const vatAmt = amount * (vatRate/100);
                const vatAmtText = `${vatAmt.toLocaleString('tr-TR', { minimumFractionDigits: 0 })} TL`;
                return `<tr><td>${i + 1}</td><td>${escapeHtml(ln.ProductName || '')}</td><td>${qtyText}</td><td class="num">${priceText}</td><td class="num">%${vatRate}</td><td class="num">${vatAmtText}</td><td class="num">${amountText}</td></tr>`;
            }).join('');
            const subTotal = (model.lines || []).reduce((a, l) => a + ((l.Quantity || 0) * (l.UnitPrice || 0)), 0);
            const totalVat = (model.lines || []).reduce((a, l) => {
                const rate = Number(l.VatRate || 0);
                const amt = (Number(l.Quantity||0) * Number(l.UnitPrice||0)) * (rate/100);
                return a + amt;
            }, 0);
            const grand = subTotal + totalVat;

            const html = `<!DOCTYPE html>
        <html lang="tr"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" />
        <title>e-FATURA</title>
        <style>
          body { margin:0; font:13px/1.4 Arial, sans-serif; color:#000; background:#fff; }
          .sheet{ width:210mm; min-height:297mm; margin:0 auto; padding:12mm; border:1px solid #000; }
          .header{ display:flex; justify-content:space-between; align-items:flex-start; border-bottom:2px solid #002147; padding-bottom:6px; margin-bottom:6px; }
          .seller{ font-size:12px; max-width:40%; }
          .seller strong{ display:block; margin-bottom:4px; color:#002147; }
          .logo{ text-align:center; font-size:16px; font-weight:bold; color:#d0021b; }
          .logo div{ margin-top:4px; }
          .buyer{ font-size:12px; max-width:40%; text-align:left; }
          .meta{ float:right; margin:8px 0; width:50%; }
          .meta table{ width:100%; border-collapse:collapse; font-size:12px; }
          .meta td{ border:1px solid #000; padding:4px 6px; }
          .meta td:first-child{ font-weight:bold; background:#f2f2f2; width:160px; color:#000; }
          .ettn{ margin:10px 0; font-weight:bold; border:2px solid #002147; padding:6px; display:inline-block; background:#fafafa; color:#002147; }
          .items{ width:100%; border-collapse:collapse; font-size:12px; margin-top:6px; }
          .items th, .items td{ border:1px solid #000; padding:6px; }
          .items th{ background:#f2f2f2; text-align:center; color:#000; border:2px solid #002147; }
          .items td.num{ text-align:right; }
          .totals{ margin-top:8px; display:flex; justify-content:flex-end; }
          .totals table{ border-collapse:collapse; font-size:12px; width:60%; }
          .totals td{ border:1px solid #000; padding:6px; }
          .totals td:first-child{ background:#f2f2f2; font-weight:bold; color:#000; border-right:2px solid #002147; }
          .totals td.num{ text-align:right; }
          .totals .pay{ color:#d0021b; font-weight:bold; }
          .footbox{ margin-top:8px; border:1px solid #000; padding:8px; font-size:12px; background:#fafafa; }
          footer{ margin-top:15px; text-align:center; font-size:11px; color:#555; }
        </style></head>
        <body>
          <section class="sheet">
            <div class="header">
              <div class="seller">
                <strong>Satıcı Bilgileri</strong>
                Adres: ${escapeHtml(sellerAddress)}<br>
                Web: ${escapeHtml(sellerWeb)}<br>
                E-posta: ${escapeHtml(sellerMail)}<br>
                Vergi Dairesi: ${escapeHtml(sellerTax)}<br>
                TCKN/VKN: ${escapeHtml(String(sellerId))}
              </div>
              <div class="logo">
                <div style="width:120px;height:60px;border:1px solid #002147;margin:auto;"></div>
                <div>${sen === 2 ? 'e-ARŞİV' : 'e-FATURA'}</div>
              </div>
              <div class="buyer">
                <strong>SAYIN</strong><br>
                ${escapeHtml(buyerName)}<br>
                Adres: ${escapeHtml(buyerAddr)}<br>
                E-posta: ${escapeHtml(buyerMail)}<br>
                Tel: ${escapeHtml(buyerPhone)}<br>
                Vergi Dairesi: ${escapeHtml(buyerTax)}
              </div>
            </div>

            <div class="meta">
              <table>
                <tr><td>Özelleştirme No</td><td>TR1.2</td></tr>
                <tr><td>Senaryo</td><td>${senText}</td></tr>
                <tr><td>Fatura Tipi</td><td>${escapeHtml(invType)}</td></tr>
                <tr><td>Fatura No</td><td>${escapeHtml(String(invNo))}</td></tr>
                <tr><td>Fatura Tarihi</td><td>${escapeHtml(invDate)}</td></tr>
                <tr><td>Gönderim Tarihi</td><td>${escapeHtml(sentDate)}</td></tr>
                <tr><td>Muhasebe Fatura No</td><td>-</td></tr>
                <tr><td>Satış Kanalı</td><td>Diğer</td></tr>
              </table>
            </div>

            <div class="ettn">ETTN: ${escapeHtml(String(inv.Ettn ?? inv.ettn ?? '-'))}</div>

            <table class="items">
              <thead>
                <tr>
                  <th>Sıra No</th>
                  <th>Mal Hizmet</th>
                  <th>Miktar</th>
                  <th>Birim Fiyat</th>
                  <th>KDV Oranı</th>
                  <th>KDV Tutarı</th>
                  <th>Mal Hizmet Tutarı</th>
                </tr>
              </thead>
              <tbody>${itemsHtml}</tbody>
            </table>

            <div class="totals">
              <table>
                <tr><td>Mal Hizmet Toplam Tutarı</td><td class="num">${tl(subTotal)}</td></tr>
                <tr><td>Hesaplanan KDV</td><td class="num">${tl(totalVat)}</td></tr>
                <tr><td>Vergiler Dahil Toplam Tutar</td><td class="num">${tl(grand)}</td></tr>
                <tr><td><strong>Ödenecek Tutar</strong></td><td class="num pay">${tl(grand)}</td></tr>
              </table>
            </div>

            <div class="footbox"><strong>Yalnız:</strong> ${yaziIle(grand)}</div>

            <footer>Bu belge sistem tarafından oluşturulmuştur.</footer>
          </section>
        </body></html>`;
            return html;
        }

        function escapeHtml(s) { return String(s || '').replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;','\'':'&#39;'}[m])); }
        function yaziIle(amount) { try { const a = Math.round(Number(amount)||0); return a.toLocaleString('tr-TR') + ' Türk Lirası'; } catch { return ''; } }
 
        function mapInvoiceType(t) { return t === 1 ? 'Alış' : t === 2 ? 'Satış' : String(t ?? ''); }
        function mapSenario(s) { return s === 1 ? 'e-Fatura' : s === 2 ? 'e-Arşiv' : s === 3 ? 'Kağıt' : String(s ?? ''); }
        function mapCurrentType(ct) { return ct === 0 ? 'Kasa' : ct === 1 ? 'Banka' : String(ct ?? ''); }
        function mapCurrency(c) { return c === 1 ? 'TL' : c === 2 ? 'EUR' : c === 3 ? 'USD' : String(c ?? ''); }
        function mapUnitType(u) { return u === 1 ? 'Adet' : u === 2 ? 'Kilogram' : u === 3 ? 'Gram' : u === 4 ? 'Litre' : u === 5 ? 'Mililitre' : u === 6 ? 'Metre' : u === 7 ? 'Santimetre' : String(u ?? ''); }
        function tl(n){ return Number(n||0).toLocaleString('tr-TR',{minimumFractionDigits:0}); }
    </script>
}
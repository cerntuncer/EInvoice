@{
    ViewData["Title"] = "Fatura Önizleme";
    var id = ViewBag.InvoiceId as long? ?? 0;
}

@section Styles {
    <style>
        html, body {
            height: 100%;
        }

        .viewer-container {
            height: calc(100vh - 80px);
        }

        iframe {
            width: 100%;
            height: 100%;
            border: 0;
            background: #f8f9fa;
        }
    </style>
}

<div class="d-flex justify-content-between align-items-center mb-3">
    <h2 class="mb-0">Fatura Önizleme</h2>
    <div>
        <a class="btn btn-secondary" href="/Invoices">Geri</a>
        <button id="btnDownload" class="btn btn-primary">PDF İndir</button>
    </div>
</div>

<div class="viewer-container">
    <iframe id="pdfFrame"></iframe>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/pdfmake@0.2.7/build/pdfmake.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/pdfmake@0.2.7/build/vfs_fonts.js"></script>
    <script>
        const invoiceId = @id;
        document.addEventListener('DOMContentLoaded', async () => {
            const inv = await loadInvoice(invoiceId);
            const docDef = buildDocDefinition(inv);
            const pdfDoc = pdfMake.createPdf(docDef);
            renderInIframe(pdfDoc);
            document.getElementById('btnDownload').addEventListener('click', () => pdfDoc.download(`Fatura_${inv.No || inv.Id}.pdf`));
        });

        async function loadInvoice(id) {
            const res = await fetch(`/Invoices/Get?id=${id}`, { cache: 'no-store' });
            if (!res.ok) throw new Error('Fatura getirilemedi');
            const data = await res.json();
            const inv = {
                Id: data.id ?? data.Id,
                No: data.no ?? data.No,
                Date: data.date ?? data.Date,
                Type: data.type ?? data.Type,
                Senario: data.senario ?? data.Senario,
                CurrentName: data.current?.name ?? data.Current?.Name ?? '',
                CustomerSupplierName: data.customerSupplier?.personName ?? data.CustomerSupplier?.PersonName ?? '',
                Lines: (data.lines ?? data.Lines ?? (data.lineOfInovices ?? data.LineOfInovices) ?? []).map(l => ({
                    ProductName: l.product?.name ?? l.Product?.Name ?? l.productName ?? l.ProductName ?? '',
                    Quantity: Number(l.quantity ?? l.Quantity) || 0,
                    UnitPrice: Number(l.unitPrice ?? l.UnitPrice) || 0,
                }))
            };
            return inv;
        }

        function buildDocDefinition(inv) {
            const rows = [
                [{ text: 'Ürün/Hizmet', style: 'th' }, { text: 'Miktar', style: 'th' }, { text: 'Birim Fiyat', style: 'th' }, { text: 'Tutar', style: 'th' }]
            ];
            let total = 0;
            inv.Lines.forEach(line => {
                const amount = (line.Quantity || 0) * (line.UnitPrice || 0);
                total += amount;
                rows.push([
                    line.ProductName,
                    { text: (line.Quantity || 0).toLocaleString() , alignment: 'right' },
                    { text: (line.UnitPrice || 0).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }), alignment: 'right' },
                    { text: amount.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }), alignment: 'right' }
                ]);
            });
            rows.push([
                { text: 'Toplam', colSpan: 3, alignment: 'right', bold: true }, {}, {},
                { text: total.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }), bold: true, alignment: 'right' }
            ]);

            return {
                pageMargins: [30, 40, 30, 40],
                content: [
                    { text: 'FATURA', style: 'title' },
                    { text: `No: ${inv.No || ''}`, margin: [0, 5, 0, 0] },
                    { text: `Tarih: ${inv.Date ? new Date(inv.Date).toLocaleString() : ''}`, margin: [0, 2, 0, 10] },
                    { columns: [
                        [ { text: 'Cari', style: 'subtitle' }, { text: inv.CurrentName || '-' } ],
                        [ { text: 'Müşteri/Tedarikçi', style: 'subtitle' }, { text: inv.CustomerSupplierName || '-' } ]
                    ], margin: [0, 0, 0, 10] },
                    { table: { headerRows: 1, widths: ['*', 80, 100, 100], body: rows } }
                ],
                styles: {
                    title: { fontSize: 18, bold: true },
                    subtitle: { fontSize: 12, bold: true, margin: [0, 0, 0, 4] },
                    th: { bold: true }
                }
            };
        }

        function renderInIframe(pdfDoc) {
            pdfDoc.getBlob((blob) => {
                const url = URL.createObjectURL(blob);
                const frame = document.getElementById('pdfFrame');
                frame.src = url;
            });
        }
    </script>
}
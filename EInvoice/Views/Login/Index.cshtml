@{
    ViewData["Title"] = "Login Page";
}

<div id="layoutAuthentication">
    <div id="layoutAuthentication_content">
        <main>
            <div class="container">
                <div class="row justify-content-center">
                    <div class="col-12 col-sm-10 col-md-8 col-lg-6 col-xl-5">
                        <div class="card shadow-lg border-0 rounded-lg mt-5">
                            <div class="card-header">
                                <h3 class="text-center font-weight-light my-4">Giriş</h3>
                            </div>
                            <div class="card-body">
                                <div id="loginMessage" class="alert d-none" role="alert"></div>

                                <form id="loginForm">
                                    @Html.AntiForgeryToken()

                                    <div class="form-floating mb-3">
                                        <input class="form-control" id="inputEmail" name="email" type="email" placeholder="E-posta" required />
                                        <label for="inputEmail">E-posta</label>
                                    </div>
                                    <div class="form-floating mb-3 position-relative">
                                        <input class="form-control" id="inputPassword" name="password" type="password" placeholder="Şifre" required />
                                        <label for="inputPassword">Şifre</label>
                                        <button type="button" id="togglePassword" class="btn btn-sm btn-outline-secondary position-absolute top-50 end-0 translate-middle-y me-2" tabindex="-1" aria-label="Şifreyi göster/gizle">
                                            <span id="toggleIcon" class="bi bi-eye"></span>
                                        </button>
                                    </div>

                                    <div class="d-flex justify-content-end mb-3">
                                        <a href="/Login/ForgotPassword">Şifremi unuttum</a>
                                    </div>

                                    <div class="d-flex align-items-center justify-content-between mt-4 mb-0">
                                        <span></span>
                                        <button id="loginButton" type="submit" class="btn btn-primary">Giriş yap</button>
                                    </div>
                                </form>
                            </div>
                            <div class="card-footer text-center py-3">
                                <div class="small"><a href="/Register/Index">Hesabın yok mu? Kayıt ol!</a></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>

<script>
    (function () {
        const form = document.getElementById("loginForm");
        const msgBox = document.getElementById("loginMessage");
        const btn = document.getElementById("loginButton");
        let isSubmitting = false;
        // Password visibility toggle
        const pwdInput = document.getElementById("inputPassword");
        const toggleBtn = document.getElementById("togglePassword");
        const toggleIcon = document.getElementById("toggleIcon");
        if (toggleBtn && pwdInput) {
            toggleBtn.addEventListener("click", function () {
                const isPwd = pwdInput.getAttribute("type") === "password";
                pwdInput.setAttribute("type", isPwd ? "text" : "password");
                if (toggleIcon) {
                    toggleIcon.className = isPwd ? "bi bi-eye-slash" : "bi bi-eye";
                }
            });
            // Reveal while mouse is down/hover; hide on leave
            toggleBtn.addEventListener("mouseenter", function () { pwdInput.setAttribute("type", "text"); });
            toggleBtn.addEventListener("mousedown", function () { pwdInput.setAttribute("type", "text"); });
            toggleBtn.addEventListener("mouseup", function () { pwdInput.setAttribute("type", "password"); });
            toggleBtn.addEventListener("mouseleave", function () { pwdInput.setAttribute("type", "password"); });
        }

        function showMsg(text, type) {
            msgBox.className = "alert alert-" + type;
            msgBox.textContent = text;
            msgBox.classList.remove("d-none");
        }

        // Submit handler
        form.addEventListener("submit", async function (e) {
            e.preventDefault();
            if (isSubmitting) return;
            isSubmitting = true;
            const originalText = btn.textContent;
            btn.disabled = true;
            btn.textContent = "Giriş yapılıyor...";

            const email = document.getElementById("inputEmail").value;
            const password = document.getElementById("inputPassword").value;
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;


            try {
                const res = await fetch("/Login/LoginUser", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "RequestVerificationToken": token
                    },
                    body: JSON.stringify({ email, password })
                });

                const contentType = res.headers.get("content-type") || "";
                const raw = await res.text();
                let data = null;
                if (contentType.includes("application/json") && raw) {
                    try { data = JSON.parse(raw); } catch { /* ignore */ }
                }

                if (res.ok && data && data.success) {
                    // accessToken varsa saklayabilirsin (opsiyonel)
                    if (data.accessToken) {
                        localStorage.setItem("jwtToken", data.accessToken);
                    }
                    window.location.href = "/Dashboard";
                } else {
                    const msg = (data && (data.message || data.error)) || raw || "Giriş başarısız";
                    showMsg(msg, "danger");
                }
            } catch (err) {
                showMsg("Sunucu hatası: " + err.message, "danger");
            } finally {
                isSubmitting = false;
                btn.disabled = false;
                btn.textContent = originalText;
            }
        });

        // Enter key fallback to submit when focused in inputs
        form.addEventListener("keydown", function (evt) {
            if (evt.key === "Enter") {
                evt.preventDefault();
                if (!isSubmitting) {
                    form.requestSubmit(btn);
                }
            }
        });
    })();
</script>